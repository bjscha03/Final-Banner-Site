import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nimport { QuoteState, MaterialKey, Grommets } from './quote';\nimport { calculateTax, calculateTotalWithTax, getFeatureFlags, getPricingOptions, computeTotals, PricingItem } from '@/lib/pricing';\n\nexport interface CartItem {\n  id: string;\n  width_in: number;\n  height_in: number;\n  quantity: number;\n  material: MaterialKey;\n  grommets: Grommets;\n  pole_pockets: string;\n  rope_feet: number;\n  area_sqft: number;\n  unit_price_cents: number;\n  line_total_cents: number;\n  file_key?: string;\n  file_name?: string;\n  file_url?: string;\n  // Add-on relationship tracking\n  parent_item_id?: string; // For add-on items, references the main banner item\n  addon_type?: 'grommets' | 'rope' | 'pole_pockets'; // Type of add-on\n  addon_details?: {\n    // For grommets\n    grommet_placement?: string;\n    // For pole pockets\n    pole_pocket_config?: string;\n    pole_pocket_size?: string;\n    // For rope\n    linear_feet?: number;\n  };\n  // AI Design metadata (optional)\n  aiDesign?: {\n    prompt: string;\n    styles: string[];\n    colors: string[];\n    size: { wIn: number; hIn: number };\n    material: string;\n    options: {\n      grommets: string;\n      polePockets: string;\n      addRope: boolean;\n    };\n    ai: {\n      provider: string;\n      seed?: number;\n      draftPublicId: string;\n    };\n    layers: {\n      headline?: string;\n      subheadline?: string;\n      cta?: string;\n    };\n    assets: {\n      proofUrl: string;\n      finalUrl?: string;\n    };\n  };\n  created_at: string;\n}\n\nexport interface UpsellOption {\n  id: 'grommets' | 'rope' | 'polePockets';\n  label: string;\n  description: string;\n  price: number;\n  selected: boolean;\n  grommetSelection?: string;\n  polePocketSelection?: string;\n  polePocketSize?: string;\n}\n\nexport interface CartState {\n  items: CartItem[];\n  addFromQuote: (quote: QuoteState, aiMetadata?: any) => void;\n  addFromQuoteWithUpsells: (quote: QuoteState, upsellOptions: UpsellOption[], aiMetadata?: any) => void;\n  updateQuantity: (id: string, quantity: number) => void;\n  removeItem: (id: string) => void;\n  clearCart: () => void;\n  getSubtotalCents: () => number;\n  getTaxCents: () => number;\n  getTotalCents: () => number;\n  getItemCount: () => number;\n  getMainItems: () => CartItem[];\n  getAddonsForItem: (parentId: string) => CartItem[];\n}\n\n// Helper function to create add-on items\nconst createAddonItem = (\n  parentItem: CartItem, \n  option: UpsellOption, \n  baseId: string\n): CartItem => {\n  const addonId = `${baseId}-addon-${option.id}`;\n  \n  switch (option.id) {\n    case 'grommets':\n      return {\n        id: addonId,\n        width_in: 0, // Add-ons don't have dimensions\n        height_in: 0,\n        quantity: parentItem.quantity,\n        material: parentItem.material,\n        grommets: 'none',\n        pole_pockets: 'none',\n        rope_feet: 0,\n        area_sqft: 0,\n        unit_price_cents: 0, // Grommets are free\n        line_total_cents: 0,\n        parent_item_id: parentItem.id,\n        addon_type: 'grommets',\n        addon_details: {\n          grommet_placement: option.grommetSelection || 'every-2-3ft'\n        },\n        created_at: new Date().toISOString()\n      };\n    \n    case 'rope':\n      const ropeFeet = parentItem.width_in / 12;\n      return {\n        id: addonId,\n        width_in: 0,\n        height_in: 0,\n        quantity: parentItem.quantity,\n        material: parentItem.material,\n        grommets: 'none',\n        pole_pockets: 'none',\n        rope_feet: ropeFeet,\n        area_sqft: 0,\n        unit_price_cents: Math.round(option.price * 100 / parentItem.quantity), // Price per unit\n        line_total_cents: Math.round(option.price * 100),\n        parent_item_id: parentItem.id,\n        addon_type: 'rope',\n        addon_details: {\n          linear_feet: ropeFeet\n        },\n        created_at: new Date().toISOString()\n      };\n    \n    case 'polePockets':\n      return {\n        id: addonId,\n        width_in: 0,\n        height_in: 0,\n        quantity: parentItem.quantity,\n        material: parentItem.material,\n        grommets: 'none',\n        pole_pockets: option.polePocketSelection || 'top-bottom',\n        rope_feet: 0,\n        area_sqft: 0,\n        unit_price_cents: Math.round(option.price * 100 / parentItem.quantity), // Price per unit\n        line_total_cents: Math.round(option.price * 100),\n        parent_item_id: parentItem.id,\n        addon_type: 'pole_pockets',\n        addon_details: {\n          pole_pocket_config: option.polePocketSelection || 'top-bottom',\n          pole_pocket_size: option.polePocketSize || '2'\n        },\n        created_at: new Date().toISOString()\n      };\n    \n    default:\n      throw new Error(`Unknown addon type: ${option.id}`);\n  }\n};\n\n// Helper function to get display name for add-ons\nexport const getAddonDisplayName = (item: CartItem): string => {\n  if (!item.addon_type) return '';\n  \n  switch (item.addon_type) {\n    case 'grommets':\n      const placement = item.addon_details?.grommet_placement || 'every-2-3ft';\n      const placementMap: Record<string, string> = {\n        'every-2-3ft': 'Every 2–3 feet',\n        'every-1-2ft': 'Every 1–2 feet',\n        '4-corners': '4 corners only',\n        'top-corners': 'Top corners only',\n        'right-corners': 'Right corners only',\n        'left-corners': 'Left corners only'\n      };\n      return `Grommets (${placementMap[placement] || placement})`;\n    \n    case 'rope':\n      const feet = item.addon_details?.linear_feet || 0;\n      return `Nylon Rope (${feet.toFixed(1)} ft)`;\n    \n    case 'pole_pockets':\n      const config = item.addon_details?.pole_pocket_config || 'top-bottom';\n      const size = item.addon_details?.pole_pocket_size || '2';\n      const configMap: Record<string, string> = {\n        'top': 'Top only',\n        'bottom': 'Bottom only',\n        'top-bottom': 'Top & Bottom',\n        'left': 'Left only',\n        'right': 'Right only'\n      };\n      return `Pole Pockets (${configMap[config] || config}, ${size}\")`;\n    \n    default:\n      return 'Add-on';\n  }\n};\n\nexport const useCartStore = create<CartState>()(\n  persist(\n    (set, get) => ({\n      items: [],\n      \n      addFromQuote: (quote: QuoteState, aiMetadata?: any) => {\n        const area = (quote.widthIn * quote.heightIn) / 144;\n        const pricePerSqFt = {\n          '13oz': 4.5,\n          '15oz': 6.0,\n          '18oz': 7.5,\n          'mesh': 6.0\n        }[quote.material];\n\n        const unitPriceCents = Math.round(area * pricePerSqFt * 100);\n        \n        // For backward compatibility, don't include add-on costs in main item\n        // Add-ons will be separate line items\n        const lineTotalCents = unitPriceCents * quote.quantity;\n        \n        // Use the file key from the uploaded file\n        const fileKey = quote.file?.fileKey;\n\n        const newItem: CartItem = {\n          id: `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n          width_in: quote.widthIn,\n          height_in: quote.heightIn,\n          quantity: quote.quantity,\n          material: quote.material,\n          grommets: 'none', // Reset to none, add-ons will be separate\n          pole_pockets: 'none', // Reset to none, add-ons will be separate\n          rope_feet: 0, // Reset to 0, add-ons will be separate\n          area_sqft: area,\n          unit_price_cents: unitPriceCents,\n          line_total_cents: lineTotalCents,\n          file_key: fileKey,\n          file_name: quote.file?.name,\n          file_url: quote.file?.url,\n          created_at: new Date().toISOString(),\n          ...(aiMetadata || {}),\n        };\n        \n        set((state) => ({\n          items: [...state.items, newItem]\n        }));\n      },\n\n      addFromQuoteWithUpsells: (quote: QuoteState, upsellOptions: UpsellOption[], aiMetadata?: any) => {\n        const area = (quote.widthIn * quote.heightIn) / 144;\n        const pricePerSqFt = {\n          '13oz': 4.5,\n          '15oz': 6.0,\n          '18oz': 7.5,\n          'mesh': 6.0\n        }[quote.material];\n\n        const unitPriceCents = Math.round(area * pricePerSqFt * 100);\n        const lineTotalCents = unitPriceCents * quote.quantity;\n        \n        const fileKey = quote.file?.fileKey;\n        const baseId = `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n\n        const mainItem: CartItem = {\n          id: baseId,\n          width_in: quote.widthIn,\n          height_in: quote.heightIn,\n          quantity: quote.quantity,\n          material: quote.material,\n          grommets: 'none', // Will be handled by add-ons\n          pole_pockets: 'none', // Will be handled by add-ons\n          rope_feet: 0, // Will be handled by add-ons\n          area_sqft: area,\n          unit_price_cents: unitPriceCents,\n          line_total_cents: lineTotalCents,\n          file_key: fileKey,\n          file_name: quote.file?.name,\n          file_url: quote.file?.url,\n          created_at: new Date().toISOString(),\n          ...(aiMetadata || {}),\n        };\n\n        // Create add-on items for selected options\n        const selectedOptions = upsellOptions.filter(option => option.selected);\n        const addonItems = selectedOptions.map(option => createAddonItem(mainItem, option, baseId));\n\n        set((state) => ({\n          items: [...state.items, mainItem, ...addonItems]\n        }));\n      },\n      \n      updateQuantity: (id: string, quantity: number) => {\n        set((state) => {\n          const updatedItems = state.items.map(item => {\n            if (item.id === id) {\n              // Update main item\n              const updatedItem = { \n                ...item, \n                quantity,\n                line_total_cents: item.unit_price_cents * quantity\n              };\n              return updatedItem;\n            } else if (item.parent_item_id === id) {\n              // Update associated add-on items\n              return {\n                ...item,\n                quantity,\n                line_total_cents: item.unit_price_cents * quantity\n              };\n            }\n            return item;\n          });\n          \n          return { items: updatedItems };\n        });\n      },\n      \n      removeItem: (id: string) => {\n        set((state) => {\n          // Remove the item and all its add-ons, or if it's an add-on, just remove it\n          const filteredItems = state.items.filter(item => \n            item.id !== id && item.parent_item_id !== id\n          );\n          return { items: filteredItems };\n        });\n      },\n      \n      clearCart: () => {\n        set({ items: [] });\n      },\n      \n      getSubtotalCents: () => {\n        const flags = getFeatureFlags();\n        const items = get().items;\n\n        if (flags.freeShipping || flags.minOrderFloor) {\n          const pricingOptions = getPricingOptions();\n          const pricingItems: PricingItem[] = items.map(item => ({ line_total_cents: item.line_total_cents }));\n          const totals = computeTotals(pricingItems, 0.06, pricingOptions);\n          return totals.adjusted_subtotal_cents;\n        }\n\n        return items.reduce((total, item) => total + item.line_total_cents, 0);\n      },\n\n      getTaxCents: () => {\n        const flags = getFeatureFlags();\n        const items = get().items;\n\n        if (flags.freeShipping || flags.minOrderFloor) {\n          const pricingOptions = getPricingOptions();\n          const pricingItems: PricingItem[] = items.map(item => ({ line_total_cents: item.line_total_cents }));\n          const totals = computeTotals(pricingItems, 0.06, pricingOptions);\n          return totals.tax_cents;\n        }\n\n        const subtotal = get().getSubtotalCents();\n        return Math.round(calculateTax(subtotal / 100) * 100);\n      },\n\n      getTotalCents: () => {\n        const flags = getFeatureFlags();\n        const items = get().items;\n\n        if (flags.freeShipping || flags.minOrderFloor) {\n          const pricingOptions = getPricingOptions();\n          const pricingItems: PricingItem[] = items.map(item => ({ line_total_cents: item.line_total_cents }));\n          const totals = computeTotals(pricingItems, 0.06, pricingOptions);\n          return totals.total_cents;\n        }\n\n        const subtotal = get().getSubtotalCents();\n        return Math.round(calculateTotalWithTax(subtotal / 100) * 100);\n      },\n\n      getItemCount: () => {\n        // Only count main items, not add-ons\n        return get().items\n          .filter(item => !item.parent_item_id)\n          .reduce((total, item) => total + item.quantity, 0);\n      },\n\n      getMainItems: () => {\n        return get().items.filter(item => !item.parent_item_id);\n      },\n\n      getAddonsForItem: (parentId: string) => {\n        return get().items.filter(item => item.parent_item_id === parentId);\n      }\n    }),\n    {\n      name: 'cart-storage',\n    }\n  )\n);\n"