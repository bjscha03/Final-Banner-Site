import React, { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAuth, isAdmin } from '../../lib/auth';
import Layout from '@/components/Layout';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Shield, Mail, Loader2, RefreshCw, ShoppingCart } from 'lucide-react';
import { useToast } from '@/components/ui/use-toast';
import { usd } from '@/lib/pricing';

interface AbandonedCart {
  id: string;
  email: string;
  phone: string;
  cart_contents: any[];
  total_value: number;
  recovery_status: string;
  recovery_emails_sent: number;
  discount_code: string | null;
  last_activity_at: string;
  abandoned_at: string | null;
  created_at: string;
}

const AbandonedCarts: React.FC = () => {
  const navigate = useNavigate();
  const { user, loading: authLoading } = useAuth();
  const [carts, setCarts] = useState<AbandonedCart[]>([]);
  const [loading, setLoading] = useState(true);
  const [showAccessDenied, setShowAccessDenied] = useState(false);
  const [sendingEmail, setSendingEmail] = useState<Record<string, boolean>>({});
  const { toast } = useToast();

  useEffect(() => {
    if (!authLoading && (!user || !isAdmin(user))) {
      setShowAccessDenied(true);
      return;
    }

    if (user && isAdmin(user)) {
      loadCarts();
    }
  }, [user, authLoading]);

  const loadCarts = async () => {
    try {
      setLoading(true);
      const response = await fetch('/.netlify/functions/get-abandoned-carts');
      
      if (!response.ok) {
        throw new Error('Failed to fetch abandoned carts');
      }

      const data = await response.json();
      setCarts(data.carts || []);
    } catch (error) {
      console.error('Error loading abandoned carts:', error);
      toast({
        title: 'Error',
        description: 'Failed to load abandoned carts',
        variant: 'destructive'
      });
    } finally {
      setLoading(false);
    }
  };

  const sendRecoveryEmail = async (cartId: string, sequenceNumber: number) => {
    try {
      setSendingEmail(prev => ({ ...prev, [cartId]: true }));

      const response = await fetch('/.netlify/functions/send-abandoned-cart-email', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ cartId, sequenceNumber })
      });

      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.message || 'Failed to send email');
      }

      const result = await response.json();

      toast({
        title: 'Email Sent!',
        description: `Recovery email \${sequenceNumber} sent successfully\${result.discountCode ? ` with discount code \${result.discountCode}` : ''}`,
      });

      await loadCarts();

    } catch (error) {
      console.error('Error sending recovery email:', error);
      toast({
        title: 'Error',
        description: error instanceof Error ? error.message : 'Failed to send recovery email',
        variant: 'destructive'
      });
    } finally {
      setSendingEmail(prev => ({ ...prev, [cartId]: false }));
    }
  };

  const formatDate = (dateString: string) => {
    if (!dateString) return 'N/A';
    const date = new Date(dateString);
    return date.toLocaleString();
  };

  const getTimeSince = (dateString: string) => {
    if (!dateString) return 'N/A';
    const date = new Date(dateString);
    const now = new Date();
    const diffMs = now.getTime() - date.getTime();
    const diffMins = Math.floor(diffMs / 60000);
    const diffHours = Math.floor(diffMins / 60);
    const diffDays = Math.floor(diffHours / 24);

    if (diffDays > 0) return \`\${diffDays}d ago\`;
    if (diffHours > 0) return \`\${diffHours}h ago\`;
    if (diffMins > 0) return \`\${diffMins}m ago\`;
    return 'Just now';
  };

  if (showAccessDenied) {
    return (
      <Layout>
        <div className="min-h-screen flex items-center justify-center">
          <div className="text-center">
            <Shield className="mx-auto h-12 w-12 text-gray-400 mb-4" />
            <h1 className="text-2xl font-bold mb-2">Access Denied</h1>
            <p className="text-gray-600 mb-4">You need admin privileges to access this page.</p>
            <Button onClick={() => navigate('/')}>Go Home</Button>
          </div>
        </div>
      </Layout>
    );
  }

  return (
    <Layout>
      <div className="container mx-auto px-4 py-8">
        <div className="flex items-center justify-between mb-6">
          <div className="flex items-center gap-3">
            <ShoppingCart className="h-8 w-8 text-[#18448D]" />
            <h1 className="text-3xl font-bold">Abandoned Carts</h1>
          </div>
          <Button onClick={loadCarts} disabled={loading} variant="outline">
            <RefreshCw className={\`h-4 w-4 mr-2 \${loading ? 'animate-spin' : ''}\`} />
            Refresh
          </Button>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
          <div className="bg-white p-4 rounded-lg border">
            <div className="text-sm text-gray-600">Total Abandoned</div>
            <div className="text-2xl font-bold">{carts.length}</div>
          </div>
          <div className="bg-white p-4 rounded-lg border">
            <div className="text-sm text-gray-600">Total Value</div>
            <div className="text-2xl font-bold">
              {usd(carts.reduce((sum, cart) => sum + Number(cart.total_value), 0))}
            </div>
          </div>
          <div className="bg-white p-4 rounded-lg border">
            <div className="text-sm text-gray-600">With Email</div>
            <div className="text-2xl font-bold">
              {carts.filter(c => c.email).length}
            </div>
          </div>
        </div>

        {loading ? (
          <div className="flex justify-center items-center py-12">
            <Loader2 className="h-8 w-8 animate-spin text-[#18448D]" />
          </div>
        ) : carts.length === 0 ? (
          <div className="text-center py-12 bg-white rounded-lg border">
            <ShoppingCart className="mx-auto h-12 w-12 text-gray-400 mb-4" />
            <p className="text-gray-600">No abandoned carts found</p>
          </div>
        ) : (
          <div className="bg-white rounded-lg border overflow-hidden">
            <div className="overflow-x-auto">
              <table className="w-full">
                <thead className="bg-gray-50 border-b">
                  <tr>
                    <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">Customer</th>
                    <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">Items</th>
                    <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">Value</th>
                    <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">Abandoned</th>
                    <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">Emails Sent</th>
                    <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">Status</th>
                    <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">Actions</th>
                  </tr>
                </thead>
                <tbody className="divide-y">
                  {carts.map((cart) => (
                    <tr key={cart.id} className="hover:bg-gray-50">
                      <td className="px-4 py-3">
                        <div className="text-sm font-medium">{cart.email || 'No email'}</div>
                        {cart.phone && <div className="text-xs text-gray-500">{cart.phone}</div>}
                      </td>
                      <td className="px-4 py-3 text-sm">{cart.cart_contents?.length || 0}</td>
                      <td className="px-4 py-3 text-sm font-medium">{usd(cart.total_value)}</td>
                      <td className="px-4 py-3 text-sm">{getTimeSince(cart.abandoned_at || cart.last_activity_at)}</td>
                      <td className="px-4 py-3 text-sm">{cart.recovery_emails_sent}</td>
                      <td className="px-4 py-3">
                        <Badge variant={cart.recovery_status === 'abandoned' ? 'destructive' : 'secondary'}>
                          {cart.recovery_status}
                        </Badge>
                      </td>
                      <td className="px-4 py-3">
                        <div className="flex gap-2">
                          {[1, 2, 3].map((seq) => (
                            <Button
                              key={seq}
                              size="sm"
                              variant={cart.recovery_emails_sent >= seq ? 'outline' : 'default'}
                              onClick={() => sendRecoveryEmail(cart.id, seq)}
                              disabled={sendingEmail[cart.id] || !cart.email}
                            >
                              {sendingEmail[cart.id] ? (
                                <Loader2 className="h-3 w-3 animate-spin" />
                              ) : (
                                <Mail className="h-3 w-3 mr-1" />
                              )}
                              {seq}
                            </Button>
                          ))}
                        </div>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>
        )}
      </div>
    </Layout>
  );
};

export default AbandonedCarts;
